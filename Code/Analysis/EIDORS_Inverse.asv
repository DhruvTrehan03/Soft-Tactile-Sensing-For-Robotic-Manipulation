% Main Script
clear
run('Source/eidors-v3.11-ng/eidors/eidors_startup.m'); % Initialize EIDORS
data_objs = load("SavedVariables\TorqueSlice.mat").clipped_data;
data_hom = load("SavedVariables\TorqueSliceHom.mat").clipped_data_hom;
mdl = load("Simulation\Model.mat","mdl").mdl;

figure();
show_fem(mdl);

n_elec = [32, 1];
fmdl = load("Simulation\Model.mat","mdl").mdl;

[stim,els] =  mk_stim_patterns(32,1,[0,16],[0,1],{'no_meas_current'}, 5);


fmdl.stimulation = stim;
fmdl.meas_select = els;
fmdl.solve=      'eidors_default';
fmdl.system_mat= 'eidors_default';
fmdl.jacobian=   'eidors_default';
fmdl.normalize_measurements= 0;
mdl_2d   = eidors_obj('fwd_model', fmdl);
  
imdl = 
plotReconstruction(data_hom,data_objs)

    imdl= add_params_2d_mdl(fmdl, n_elec(1), options, 2, data_homg, data_objs);


function inv2d= add_params_2d_mdl(params, n_elec, options, n, homg, objs)
    n_rings= 1;
    [st, els]= mk_stim_patterns(n_elec, n_rings, '{op}','{ad}', options, 10);
    params.stimulation= st;
    params.meas_select= els;
    params.solve=      'eidors_default';
    params.system_mat= 'eidors_default';
    params.jacobian=   'eidors_default';
    params.normalize_measurements= 0;
    mdl_2d   = eidors_obj('fwd_model', params);

    % code from compare_2d_algs example in EIDORS doc
    inv2d= eidors_obj('inv_model', 'EIT inverse');
    inv2d.reconst_type= 'difference';
    inv2d.jacobian_bkgnd.value= 1;
    inv2d.fwd_model= mdl_2d;
    %inv2d.fwd_model.np_fwd_solve.perm_sym= '{y}';
    inv2d.parameters.term_tolerance= 1e-4;

    %inv2d.fwd_model = mdl_normalize(inv2d.fwd_model,1);

    if n==1
    % case 1
        % inv2d.hyperparameter.value = 0.004; % Lorcan
        inv2d.hyperparameter.value = 0.04;
        inv2d.solve=       'inv_solve_diff_GN_one_step';
        inv2d.RtR_prior=   'prior_laplace';
    elseif n==2
        % case 2
        inv2d.hyperparameter.value = 1e-2; % Lorcan
        % inv2d.hyperparameter.value = 1e-1;
        inv2d.RtR_prior=   'prior_laplace';
        inv2d.solve=       'np_inv_solve';
    elseif n==3
        % case 3
        inv2d.hyperparameter.func = @choose_noise_figure;
        inv2d.hyperparameter.noise_figure= 2;
        inv2d.hyperparameter.tgt_elems= 1:4;
        inv2d.RtR_prior=   'prior_gaussian_HPF';
        inv2d.solve=       'inv_solve_diff_GN_one_step';
    elseif n==31
        %case 3.1
        inv2d.hyperparameter.func = @choose_noise_figure;
        inv2d.hyperparameter.noise_figure= 2;
        inv2d.hyperparameter.tgt_elems= 1:4;
        inv2d.RtR_prior=   @prior_laplace;
        inv2d.solve=       'inv_solve_diff_GN_one_step';
    elseif n==4
        % case 4
        inv2d.hyperparameter.value = 1e-6;
        inv2d.parameters.max_iterations= 10;
        inv2d.R_prior=     'prior_TV';
        inv2d.solve=       'inv_solve_TV_pdipm';
        inv2d.parameters.keep_iterations=1;
    elseif n==5
        % case 5
        inv2d.hyperparameter.value = 1e-4;
        inv2d.solve=       'aa_inv_total_var';
        inv2d.R_prior=     'prior_laplace';
        inv2d.parameters.max_iterations= 10;
    elseif n==6
        % case 6
        ;
    elseif n==7
        % case 7
        inv2d.hyperparameter.value = 1e-2;
        inv2d.parameters.max_iterations = 1e3;
        inv2d.parameters.term_tolerance = 1e-3;
        inv2d.solve=          'aa_inv_conj_grad';
        inv2d.R_prior=        'prior_TV';
    elseif n==8
        % case 8
        inv2d.hyperparameter.value = 1e-5;
        inv2d.parameters.max_iterations= 20;
        inv2d.R_prior=     'prior_TV';
        inv2d.solve=       'inv_solve_TV_irls';
        inv2d.parameters.keep_iterations=1;
    end

    inv2d.name= 'dsh_rect'; 
    inv2d= eidors_obj('inv_model', inv2d);
    valid_inv_model(inv2d);
    [stim, meas_select] = mk_stim_patterns(32,1,'{op}','{ad}',options,1);
    inv2d.fwd_model.stimulation = stim;
    inv2d.fwd_model.meas_select = meas_select;
    img = inv_solve(inv2d, homg, objs);
    show_slices(img);

end