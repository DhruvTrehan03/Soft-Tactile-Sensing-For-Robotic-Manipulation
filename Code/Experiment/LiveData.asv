% For debugging: see EIT board data in real time

clear

% Prompt user to select which devices to initialize
init_left = input('Initialize Left (COM13)? (1 for yes, 0 for no): ');
init_right = input('Initialize Right (COM14)? (1 for yes, 0 for no): ');
init_truth = input('Initialize Truth (COM15)? (1 for yes, 0 for no): ');

% Initialize selected devices
if init_left
    left = serialport("COM13", 115200);
    left.Timeout = 25;
end
if init_right
    right = serialport("COM14", 115200);
    right.Timeout = 25;
end
if init_truth
    truth = serialport("COM15", 115200);
    truth.Timeout = 25;
end

% Send initialization command to active devices
if init_left, left.write("y", "string"); end
if init_right, right.write("y", "string"); end

% Get the current time to create unique file names
current_time = datetime('now', 'Format', 'yyyy-MM-dd_HH-mm-ss');  % Current time with format YYYYMMDD_HHMMSS
time_str = char(current_time);

% Specify the directory to save the data
save_dir = ['C:\Users\dhruv\Soft-Tactile-Sensing-For-Robotic-Manipulation\Readings\', time_str];
mkdir(save_dir)

% Initialize data buffers
for i = 1:1
    current_time = datenum(datetime('now', 'Format', 'HH:mm:ss.SSS'));
    if init_left, data_left = str2num(readline(left)); end
    if init_right, data_right = str2num(readline(right)); end
    if init_truth, data_truth = str2num(readline(truth)); end
end

if init_left, plotthis_left = [current_time, data_left]; end
if init_right, plotthis_right = [current_time, data_right]; end
if init_truth, plotthis_truth = [current_time, data_truth]; end

% Number of readings to capture
n = input("What value of n (readings)? ");

for i = 1:n
    while 1<10
    end
    disp(i);
    
    % Read data from active devices
    if init_left, data_left = str2num(readline(left)); end
    if init_right, data_right = str2num(readline(right)); end
    if init_truth, data_truth = str2num(readline(truth)); end
    
    % Get the current time for this reading
    current_time = datenum(datetime('now', 'Format', 'HH:mm:ss.SSS'));
    
    % Process and append data if available
    if init_left && ~isempty(data_left)
        data_left = [current_time, data_left];
        plotthis_left = [plotthis_left; data_left];
    end
    if init_right && ~isempty(data_right)
        data_right = [current_time, data_right];
        plotthis_right = [plotthis_right; data_right];
    end
    if init_truth && ~isempty(data_truth)
        data_truth = [current_time, data_truth];
        plotthis_truth = [plotthis_truth; data_truth];
    end

    % Store time for each reading
    time_log(i) = current_time;
end

% Save data only for initialized devices
if init_left, save(fullfile(save_dir, 'left.mat'), 'plotthis_left'); end
if init_right, save(fullfile(save_dir, 'right.mat'), 'plotthis_right'); end
if init_truth, save(fullfile(save_dir, 'truth.mat'), 'plotthis_truth'); end

% Clear initialized devices
if init_left, clear left; end
if init_right, clear right; end
if init_truth, clear truth; end
